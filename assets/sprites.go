package assets

// Sprite represents a pixel art sprite
type Sprite struct {
	Width  int
	Height int
	Data   [][]int // 0 = transparent, 1 = filled
}

// GetPlayerSprite returns the player ship sprite
func GetPlayerSprite() *Sprite {
	return &Sprite{
		Width:  13,
		Height: 8,
		Data: [][]int{
			{0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0},
			{0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0},
			{0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
			{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
			{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
			{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
			{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
		},
	}
}

// GetInvaderSprite returns an invader sprite based on type and animation frame
func GetInvaderSprite(invaderType int, frame int) *Sprite {
	switch invaderType {
	case 0: // Small invader
		if frame == 0 {
			return &Sprite{
				Width:  8,
				Height: 8,
				Data: [][]int{
					{0, 0, 1, 0, 0, 1, 0, 0},
					{0, 0, 0, 1, 1, 0, 0, 0},
					{0, 0, 1, 1, 1, 1, 0, 0},
					{0, 1, 1, 0, 0, 1, 1, 0},
					{1, 1, 1, 1, 1, 1, 1, 1},
					{1, 0, 1, 1, 1, 1, 0, 1},
					{1, 0, 1, 0, 0, 1, 0, 1},
					{0, 0, 0, 1, 1, 0, 0, 0},
				},
			}
		}
		return &Sprite{
			Width:  8,
			Height: 8,
			Data: [][]int{
				{0, 0, 1, 0, 0, 1, 0, 0},
				{1, 0, 0, 1, 1, 0, 0, 1},
				{1, 0, 1, 1, 1, 1, 0, 1},
				{1, 1, 1, 0, 0, 1, 1, 1},
				{1, 1, 1, 1, 1, 1, 1, 1},
				{0, 0, 1, 1, 1, 1, 0, 0},
				{0, 0, 1, 0, 0, 1, 0, 0},
				{0, 1, 0, 0, 0, 0, 1, 0},
			},
		}

	case 1: // Medium invader
		if frame == 0 {
			return &Sprite{
				Width:  11,
				Height: 8,
				Data: [][]int{
					{0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0},
					{0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0},
					{0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0},
					{0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0},
					{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
					{1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1},
					{1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1},
					{0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0},
				},
			}
		}
		return &Sprite{
			Width:  11,
			Height: 8,
			Data: [][]int{
				{0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0},
				{1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1},
				{1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1},
				{1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1},
				{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0},
				{0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0},
				{0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0},
			},
		}

	default: // Large invader
		if frame == 0 {
			return &Sprite{
				Width:  12,
				Height: 8,
				Data: [][]int{
					{0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0},
					{0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
					{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
					{1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1},
					{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
					{0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0},
					{0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0},
					{1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
				},
			}
		}
		return &Sprite{
			Width:  12,
			Height: 8,
			Data: [][]int{
				{0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0},
				{0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
				{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1},
				{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0},
				{0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0},
				{0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0},
			},
		}
	}
}

// GetUFOSprite returns the UFO sprite
func GetUFOSprite() *Sprite {
	return &Sprite{
		Width:  16,
		Height: 7,
		Data: [][]int{
			{0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
			{0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0},
			{0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0},
			{0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0},
			{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
			{0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0},
			{0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0},
		},
	}
}

// GetExplosionSprite returns explosion sprite for animation frame
func GetExplosionSprite(frame int) *Sprite {
	switch frame {
	case 0:
		return &Sprite{
			Width:  12,
			Height: 10,
			Data: [][]int{
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0},
				{0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0},
				{0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0},
				{0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0},
				{0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0},
				{0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0},
				{0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0},
				{0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
			},
		}
	case 1:
		return &Sprite{
			Width:  12,
			Height: 10,
			Data: [][]int{
				{0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0},
				{0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0},
				{0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0},
				{0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
				{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
				{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
				{0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0},
				{0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0},
				{0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0},
				{0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0},
			},
		}
	default:
		return &Sprite{
			Width:  12,
			Height: 10,
			Data: [][]int{
				{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
				{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
			},
		}
	}
}